{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity += 1;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nfunction sendCartData(cart) {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending....\",\n      message: \"Sending cart data\"\n    }));\n    async function sendRequest() {\n      const response = await fetch(\"https://react-project-59a16-default-rtdb.firebaseio.com/cart.json\", {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    }\n    try {\n      await sendRequest();\n      //const resData = await response.json();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success....\",\n        message: \"Sent cart data Successfully\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error\",\n        message: \"Sending cart data failed\"\n      }));\n    }\n  };\n}\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"sources":["C:/Users/pranavpp/Documents/ReactJS/Projects/20-Advance-Redux/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        items: [],\r\n        totalQuantity: 0,\r\n    },\r\n    reducers: {\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find(item => item.id === newItem.id);\r\n            state.totalQuantity += 1;\r\n            if (!existingItem) {\r\n                state.items.push({ id: newItem.id, price: newItem.price, quantity: 1, totalPrice: newItem.price, name: newItem.title });\r\n            }\r\n            else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n\r\n            }\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.totalQuantity--;\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter(item => item.id !== id);\r\n            }\r\n            else {\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nfunction sendCartData(cart) {\r\n    return async (dispatch) => {\r\n        dispatch(uiActions.showNotification({\r\n            status: \"pending\",\r\n            title: \"Sending....\",\r\n            message: \"Sending cart data\"\r\n        }));\r\n\r\n        async function sendRequest() {\r\n            const response = await fetch(\"https://react-project-59a16-default-rtdb.firebaseio.com/cart.json\", {\r\n                method: 'PUT',\r\n                body: JSON.stringify(cart)\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Sending cart data failed.')\r\n            }\r\n        }\r\n\r\n        try {\r\n            await sendRequest();\r\n            //const resData = await response.json();\r\n            dispatch(uiActions.showNotification({\r\n                status: \"success\",\r\n                title: \"Success....\",\r\n                message: \"Sent cart data Successfully\"\r\n            }))\r\n        } catch (error) {\r\n            dispatch(uiActions.showNotification({\r\n                status: \"error\",\r\n                title: \"Error\",\r\n                message: \"Sending cart data failed\"\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}