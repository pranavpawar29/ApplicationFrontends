{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pranavpp\\\\Documents\\\\ReactJS\\\\Projects\\\\21-Routing\\\\Project-Practice\\\\frontend\\\\src\\\\Pages\\\\EventsPage.jsx\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    return {\n      isError: true,\n      message: \"Could not fetch events\"\n    };\n  } else {\n    return response;\n  }\n}\n\n// export async function loader() {\n//   const response = await fetch('http://localhost:8080/events');\n\n//   if (!response.ok) {\n\n//   } else {\n//     const resData = await response.json();\n//     const res = new Response('any data', { status: 201 });\n//   }\n// }\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","$RefreshReg$"],"sources":["C:/Users/pranavpp/Documents/ReactJS/Projects/21-Routing/Project-Practice/frontend/src/Pages/EventsPage.jsx"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n  if(data.isError) {\r\n    return <>\r\n      <p>{data.message}</p>\r\n    </>\r\n  }\r\n  const events = data.events;\r\n  return (\r\n    <>\r\n      <EventsList events={events} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader() {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    return { isError: true, message: \"Could not fetch events\"}\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\n// export async function loader() {\r\n//   const response = await fetch('http://localhost:8080/events');\r\n\r\n//   if (!response.ok) {\r\n\r\n//   } else {\r\n//     const resData = await response.json();\r\n//     const res = new Response('any data', { status: 201 });\r\n//   }\r\n// }"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAC5B,IAAGQ,IAAI,CAACC,OAAO,EAAE;IACf,oBAAON,OAAA,CAAAE,SAAA;MAAAK,QAAA,eACLP,OAAA;QAAAO,QAAA,EAAIF,IAAI,CAACG;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,gBACrB,CAAC;EACL;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAC1B,oBACEb,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACF,UAAU;MAACe,MAAM,EAAEA;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACR,EAAA,CAbQD,UAAU;EAAA,QACJN,aAAa;AAAA;AAAAiB,EAAA,GADnBX,UAAU;AAenB,eAAeA,UAAU;AAEzB,OAAO,eAAeY,MAAMA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,OAAO;MAAEZ,OAAO,EAAE,IAAI;MAAEE,OAAO,EAAE;IAAwB,CAAC;EAC5D,CAAC,MAAM;IACL,OAAOQ,QAAQ;EACjB;AACF;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA,IAAAF,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}